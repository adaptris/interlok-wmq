<project basedir="." default="prepare-ivy" name="IvyTasks" xmlns:adapter="uri:adapter" xmlns:ivy="antlib:org.apache.ivy.ant" xmlns:jacoco="antlib:org.jacoco.ant">

  <target name="init-ivy">
    <property name="ivy.install.version" value="2.3.0"/>
    <property name="ivy.repo" value="nexus-snapshots"/>
    <property name="ivy.dir" value="${basedir}/ivy"/>
    <property name="ivy.jar.file" value="${ivy.dir}/ivy.jar"/>
    <property name="ivy.settings.xml" value="${ivy.dir}/ivy-settings.xml"/>
    <property name="ivy.download.baseurl" value="https://development.adaptris.net/nexus/content/groups/public/org/apache/ivy/ivy"/>
    <property name="ivy.download.url" value="${ivy.download.baseurl}/${ivy.install.version}/ivy-${ivy.install.version}.jar"/>
    <property name="ivy.xml.file" value="${basedir}/ivy.xml"/>
    <property name="ivy.offline.mode" value="false"/>
    <property name="ivy.artifact.publish.status" value="integration"/>
    <!--   Use http://tsa.starfieldtech.com or https://timestamp.geotrust.com/tsa as the TSAURL.
    <property name="signjar.tsa.url" value="http://tsa.starfieldtech.com"/>
    <property name="signjar.tsa.url" value="http://timestamp.verisign.com/>
    -->
    <property name="signjar.tsa.url" value="https://timestamp.geotrust.com/tsa"/>

    <property name="interlok-api.javadoc.url" value="https://development.adaptris.net/javadocs/latest/Interlok-API/"/>
    <property name="interlok-common.javadoc.url" value="https://development.adaptris.net/javadocs/latest/Interlok-Common/"/>

    <!-- Default publish type is "JAR" -->
    <property name="ivy.publish.bundle.type" value="jar"/>
    <property name="ivy.report.dir" value="${build.dir}/ivy-report"/>
    <property name="coverage.report.output.dir" value="${tests.output.dir}/coverage"/>
    <property name="coverage.report.html.output.dir" value="${coverage.report.output.dir}/html"/>
    <property name="coverage.build.dir" value="${build.dir}/coverage"/>
    <property name="coverage.metadata.file" value="${basedir}/jacoco.exec"/>

    <property name="code-signing.keystore"  value="${build.dir}/signing/code-signing.jks"/>
    <property name="code-signing.alias" value="code_signer"/>
    <!-- Default this to false, so that we always sign -->
    <property name="unsigned.code"          value="false"/>
    <tstamp>
      <format property="build.date" pattern="yyyy-MM-dd" locale="en"/>
    </tstamp>
    <property environment="env"/>
    <property name="env.COMPUTERNAME" value="${env.HOSTNAME}"/>
    <!-- On Windows the Environment-Variable is not all uppercase -->
    <path id="combined-PATH">
      <pathelement path="${env.PATH}"/>
      <pathelement path="${env.Path}"/>
    </path>
    <property name="SYSPATH" refid="combined-PATH"/>
    <condition property="graphviz.available">
      <or>
        <available file="dot.exe" filepath="${SYSPATH}"/>
        <available file="dot" filepath="${SYSPATH}"/>
      </or>
    </condition>
  </target>

  <target name="download-ivy" depends="init-ivy" unless="skip.ivy.download">
    <echo message="Downloading ivy..." level="verbose"/>
    <mkdir dir="${ivy.dir}"/>
    <get src="${ivy.download.url}" dest="${ivy.jar.file}" usetimestamp="true"/>
  </target>

  <target name="install-ivy" depends="download-ivy">
    <path id="ivy.lib.path">
      <pathelement location="${ivy.jar.file}"/>
    </path>
    <taskdef resource="org/apache/ivy/ant/antlib.xml" uri="antlib:org.apache.ivy.ant" classpathref="ivy.lib.path"/>
  </target>



  <target name="taskdef.init" depends="init, install-ivy">
    <property name="ivy.logging" value="quiet"/>
    <ivy:settings file="${ivy.settings.xml}" />
    <ivy:resolve file="${ivy.xml.file}" refresh="true" showprogress="false" log="${ivy.logging}" useCacheOnly="${ivy.offline.mode}"/>

    <ivy:cachepath pathid="classpath.ant-tools" conf="ant" type="jar,zip,bundle"/>
    <ivy:cachepath pathid="main.classpath" conf="compile,runtime,test,optional" type="jar,zip,bundle,hk2-jar,maven-plugin"/>
    <property name="anttools.classpath" refid="classpath.ant-tools"/>
    <property name="cc.classpath" refid="main.classpath"/>
    <echo message="Ivy Resolved Classpath - ${cc.classpath}" level="verbose"/>
    <echo message="Ivy Resolved Classpath for ant - ${anttools.classpath}" level="verbose"/>
    <!-- yguard obfuscator -->
    <taskdef name="obfuscate" classname="com.yworks.yguard.YGuardTask" classpathref="classpath.ant-tools" />
    <!-- antcontrib (if statements) -->
    <typedef resource="net/sf/antcontrib/antlib.xml" classpathref="classpath.ant-tools" />
    <!-- jacoco coverage -->
    <typedef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml" classpathref="classpath.ant-tools"/>
    <!--
    <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask" classpathref="classpath.ant-tools"/>
    -->
  </target>

  <target name="macrodef.init" depends="init, install-ivy, taskdef.init">

    <macrodef name="property-source" uri="uri:adapter">
      <attribute name="file" />
      <sequential>
        <echo message="Looking for @{file}.${env.COMPUTERNAME}"/>
        <if>
          <available file="@{file}.${env.COMPUTERNAME}" />
          <then>
            <echo message="Using @{file}.${env.COMPUTERNAME}"/>
            <property file="@{file}.${env.COMPUTERNAME}"/>
          </then>
          <else>
            <echo message="Using @{file}"/>
            <property file="@{file}"/>
          </else>
        </if>
      </sequential>
    </macrodef>

    <macrodef name="copy-template" uri="uri:adapter">
      <attribute name="src" />
      <attribute name="dest"/>
      <sequential>
        <if>
          <not>
            <available file="@{dest}"/>
          </not>
          <then>
            <if>
              <available file="@{src}.${env.COMPUTERNAME}" />
              <then>
                <copy file="@{src}.${env.COMPUTERNAME}" tofile="@{dest}"/>
              </then>
              <else>
                <copy file="@{src}" tofile="@{dest}"/>
              </else>
            </if>
          </then>
        </if>
      </sequential>
    </macrodef>


    <macrodef name="create-jar" uri="uri:adapter">
      <attribute name="basedir"/>
      <attribute name="jarfile"/>
      <attribute name="manifest"/>
      <attribute name="version" default="${ivy.publish.revision}"/>
      <attribute name="version-title"/>
      <element name="obfuscate-patternset" optional="true"/>
      <element name="obfuscate-externals" optional="true"/>
      <element name="jar-services" optional="true"/>
      <sequential>
        <mkdir dir="@{basedir}/META-INF"/>
        <propertyfile file="@{basedir}/META-INF/adaptris-version">
          <entry key="component.name" value="@{version-title}"/>
          <entry key="build.version" value="@{version}"/>
          <entry key="build.date" value="${build.date}"/>
        </propertyfile>
        <var name="tmp.jar" value="${build.dir}/tmp.jar"/>
        <if>
          <istrue value="${no.obfuscation}"/>
          <then>
            <jar jarfile="@{jarfile}"  manifest="@{manifest}" >
              <fileset dir="@{basedir}"/>
              <jar-services/>
            </jar>
          </then>
          <else>
            <jar jarfile="${tmp.jar}"  manifest="@{manifest}" >
              <fileset dir="@{basedir}"/>
              <jar-services/>
            </jar>
            <adapter:obfuscate input.jar="${tmp.jar}" output.jar="@{jarfile}">
              <patternset-filter>
                <obfuscate-patternset/>
              </patternset-filter>
              <additional-externalclasses>
                <obfuscate-externals/>
              </additional-externalclasses>
            </adapter:obfuscate>
          </else>
        </if>
        <adapter:sign-jar jarfile="@{jarfile}"/>
        <var name="tmp.jar" unset="true"/>
      </sequential>
    </macrodef>

    <macrodef name="obfuscate" uri="uri:adapter">
      <attribute name="input.jar"/>
      <attribute name="output.jar"/>
      <attribute name="yguard.report" default="${build.dir}/yguard.xml"/>
      <element name="patternset-filter" optional="true"/>
      <element name="additional-externalclasses" optional="true"/>
      <sequential>
        <obfuscate>
          <inoutpair in="@{input.jar}" out="@{output.jar}" resources="copy"/>
          <attribute name="Deprecated"/>
          <rename replaceclassnamestrings="true" conservemanifest="true" logfile="@{yguard.report}">
            <property name="expose-attributes" value="Deprecated"/>
            <property name="language-conformity" value="legal"/>
            <property name="naming-scheme" value="mix"/>
            <keep>
              <class classes="protected" methods="protected" fields="private">
                <patternset>
                  <include name="com.adaptris.**.*"/>
                  <patternset-filter/>
                </patternset>
              </class>
              <attribute name="Deprecated, SourceFile, LineNumberTable, RuntimeVisibleAnnotations, RuntimeVisibleParameterAnnotations, RuntimeInvisibleAnnotations, RuntimeInvisibleParameterAnnotations">
                <patternset>
                  <include name="com.adaptris.**.*"/>
                  <patternset-filter/>
                </patternset>
              </attribute>
            </keep>
          </rename>
          <externalclasses>
            <path refid="main.classpath"/>
            <pathelement location="${ant.core.lib}"/>
            <additional-externalclasses/>
          </externalclasses>
        </obfuscate>
        <delete file="@{input.jar}"/>
      </sequential>
    </macrodef>

    <macrodef name="get-offline-javadocs" uri="uri:adapter">
      <attribute name="destdir" default="${build.dir}/offline-javadocs"/>
      <sequential>
        <mkdir dir="@{destdir}"/>
        <ivy:retrieve pattern="@{destdir}/[artifact].[ext]" organisation="com.adaptris" conf="javadoc" type="javadoc" log="${ivy.logging}"/>
        <if>
          <and>
            <available file="@{destdir}/adp-core.jar"/>
            <available file="@{destdir}/interlok-common.jar"/>
          </and>
          <then>
            <mkdir dir="@{destdir}/interlok-common"/>
            <mkdir dir="@{destdir}/adp-core"/>
            <unzip src="@{destdir}/adp-core.jar" dest="@{destdir}/adp-core">
              <patternset>
                <include name="**/package-list"/>
              </patternset>            
            </unzip>
            <unzip src="@{destdir}/interlok-common.jar" dest="@{destdir}/interlok-common">
              <patternset>
                <include name="**/package-list"/>
              </patternset>            
            </unzip>
            <property name="offline.javadocs.available" value="true"/>
          </then>
          <else>
            <property name="offline.javadocs.available" value="false"/>
          </else>
        </if>
      </sequential>
    </macrodef>

    <macrodef name="create-javadocs" uri="uri:adapter">
      <attribute name="destdir" default="${api.doc.dir}"/>
      <attribute name="sourcepath" default="${src.dir}"/>
      <element name="custom-doclet" optional="true"/>
      <element name="grouping" optional="true"/>
      <element name="packageset-filter" optional="true"/>
      <sequential>
        <adapter:get-offline-javadocs/>
        <javadoc author="false" destdir="@{destdir}" windowtitle="Interlok Adapter Framework API" bottom="Copyright Adaptris"
                 access="protected" breakiterator="yes" verbose="no" charset="ISO-8859-1" >
          <arg value="-quiet"/>
          <arg value="-Xdoclint:none"/>
          <packageset dir="@{sourcepath}" defaultexcludes="yes">
            <packageset-filter/>
          </packageset>
          <classpath>
            <path refid="main.classpath"/>
            <pathelement location="${ant.core.lib}"/>
          </classpath>
          <custom-doclet/>
          <grouping/>
          <link offline="${offline.javadocs.available}" href="${interlok-api.javadoc.url}" packagelistLoc="${build.dir}/offline-javadocs/adp-core"/>
          <link offline="${offline.javadocs.available}" href="${interlok-common.javadoc.url}" packagelistLoc="${build.dir}/offline-javadocs/interlok-common"/>
          <taglet name="com.adaptris.taglet.ConfigTaglet">
            <path refid="classpath.ant-tools"/>
          </taglet>
          <taglet name="com.adaptris.taglet.LicenseTaglet">
            <path refid="classpath.ant-tools"/>
          </taglet>
        </javadoc>
      </sequential>
    </macrodef>

    <macrodef name="uml-javadoc-creator" uri="uri:adapter">
      <attribute name="destdir" default="${api.doc.dir}"/>
      <attribute name="imgdir" default="${api.img.dir}"/>
      <attribute name="sourcepath" default="${src.dir}"/>
      <element name="groups" optional="true"/>
      <element name="packages" optional="true"/>
      <sequential>
        <delete dir ="@{destdir}" />
        <delete dir ="@{imgdir}" />
        <mkdir dir ="@{destdir}" />
        <mkdir dir ="@{imgdir}" />
        <if>
          <and>
            <isset property="graphviz.available"/>
          </and>
          <then>
            <echo message="Building with Graphviz + PlantUML + UMLDoclet"/>
            <adapter:create-javadocs sourcepath="@{sourcepath}" destdir="@{destdir}">
              <custom-doclet>
                <doclet name="nl.talsmasoftware.umldoclet.UMLDoclet" pathref="classpath.ant-tools">
                  <param name="-umlBasePath" value="@{imgdir}"/>
                  <param name="-umlImageFormat" value="SVG"/>
                  <param name="-umlExcludedReferences" value="java.lang.Exception,java.lang.Object,java.lang.Enum"/>
                  <param name="-umlIncludePrivateClasses" value="false"/>
                  <param name="-umlIncludePackagePrivateClasses" value="false"/>
                  <param name="-umlIncludeProtectedClasses" value="false"/>
                  <param name="-umlIncludeAbstractSuperclassMethods" value="false"/>
                  <param name="-umlIncludeConstructors" value="false"/>
                  <param name="-umlIncludePublicFields" value="false"/>
                  <param name="-umlIncludePackagePrivateFields" value="false"/>
                  <param name="-umlIncludeProtectedFields" value="false"/>
                  <param name="-umlIncludeDeprecatedClasses" value="false"/>
                  <param name="-umlIncludePrivateInnerClasses" value="false"/>
                  <param name="-umlIncludePackagePrivateInnerClasses" value="false"/>
                  <param name="-umlIncludeProtectedInnerClasses" value="false"/>
                </doclet>
              </custom-doclet>
              <grouping>
                <groups/>
              </grouping>
              <packageset-filter>
                <packages/>
              </packageset-filter>
            </adapter:create-javadocs>
          </then>
          <else>
            <adapter:create-javadocs sourcepath="@{sourcepath}" destdir="@{destdir}">
              <grouping>
                <groups/>
              </grouping>
              <packageset-filter>
                <packages/>
              </packageset-filter>
            </adapter:create-javadocs>
          </else>
        </if>
      </sequential>
    </macrodef>

    <macrodef name="ydoc-javadoc-creator" uri="uri:adapter">
      <attribute name="destdir" default="${api.doc.dir}"/>
      <attribute name="sourcepath" default="${src.dir}"/>
      <element name="groups" optional="true"/>
      <element name="packages" optional="true"/>
      <sequential>
        <delete dir ="@{destdir}" />
        <mkdir dir ="@{destdir}" />
        <if>
          <and>
            <isset property="ydoc.dir"/>
            <available file="${ydoc.dir}" type="dir"/>
          </and>
          <then>
            <adapter:create-javadocs sourcepath="@{sourcepath}" destdir="@{destdir}">
              <custom-doclet>
                <doclet name="ydoc.doclets.YStandard"
                  path="${ydoc.dir}/lib/ydoc.jar:${ydoc.dir}/resources:${ydoc.dir}/doc">
                  <param name="-generic"/>
                  <param name="-umlpackagegen"/>
                  <param name="-umltypegen"/>
                  <param name="-filterpath" value="${ydoc.dir}/lib/ydoc.jar"/>
                  <param name="-filter"     value="ydoc.filters.ExcludeFilter"/>
                  <param name="-tag" value="y.precondition"/>
                  <param name="-tag" value="y.postcondition"/>
                  <param name="-tag" value="y.complexity"/>
                  <param name="-tag" value="param"/>
                  <param name="-tag" value="return"/>
                  <param name="-tag" value="see"/>
                  <param name="-tag" value="y.uml"/>
                </doclet>
              </custom-doclet>
              <grouping>
                <groups/>
              </grouping>
              <packageset-filter>
                <packages/>
              </packageset-filter>
            </adapter:create-javadocs>
          </then>
          <else>
            <adapter:create-javadocs sourcepath="@{sourcepath}" destdir="@{destdir}">
              <grouping>
                <groups/>
              </grouping>
              <packageset-filter>
                <packages/>
              </packageset-filter>
            </adapter:create-javadocs>
          </else>
        </if>
      </sequential>
    </macrodef>

    <macrodef name="execute-tests" uri="uri:adapter">
      <attribute name="printsummary" default="true"/>
      <attribute name="fork" default="yes"/>
      <attribute name="showoutput" default="no"/>
      <attribute name="forkmode" default="once"/>
      <element name="test-filter" optional="true"/>
      <sequential>
        <if>
          <istrue value="${no.coverage}"/>
          <then>
            <adapter:execute-tests-plain printsummary="@{printsummary}" fork="@{fork}" forkmode="@{forkmode}" showoutput="@{showoutput}">
              <test-execution-filter>
                <test-filter/>
              </test-execution-filter>
            </adapter:execute-tests-plain>
          </then>
          <else>
            <adapter:execute-tests-coverage printsummary="@{printsummary}" fork="@{fork}" forkmode="@{forkmode}" showoutput="@{showoutput}">
              <test-execution-filter>
                <test-filter/>
              </test-execution-filter>
            </adapter:execute-tests-coverage>
          </else>
        </if>
      </sequential>
    </macrodef>

    <macrodef name="test-reports" uri="uri:adapter">
      <attribute name="basedir"/>
      <attribute name="reportdir"/>
      <element name="coverage-filter" optional="true"/>
      <sequential>
        <if>
          <isfalse value="${no.coverage}"/>
          <then>
            <mkdir dir="${coverage.report.output.dir}"/>
            <mkdir dir="${coverage.report.html.output.dir}"/>
            <jacoco:report>
                <executiondata>
                  <file file="${coverage.metadata.file}"/>
                </executiondata>
                <structure name="Code Coverage Report">
                  <classfiles>
                    <fileset dir="${classes.build.dir}">
                      <include name="**/*.class"/>
                      <coverage-filter/>
                    </fileset>
                  </classfiles>
                  <sourcefiles encoding="UTF-8">
                    <fileset dir="${src.dir}"/>
                  </sourcefiles>
                </structure>
                <html destdir="${coverage.report.html.output.dir}"/>
                <csv destfile="${coverage.report.output.dir}/jacoco-report.csv"/>
                <xml destfile="${coverage.report.output.dir}/jacoco-report.xml"/>
            </jacoco:report>
          </then>
        </if>
        <junitreport todir="@{basedir}">
          <fileset dir="@{basedir}">
            <include name="TEST-*.xml" />
          </fileset>
          <report format="frames" todir="@{reportdir}"/>
        </junitreport>
      </sequential>
    </macrodef>

    <macrodef name="execute-tests-plain" uri="uri:adapter">
      <attribute name="printsummary" default="true"/>
      <attribute name="fork" default="yes"/>
      <attribute name="showoutput" default="no"/>
      <attribute name="forkmode" default="once"/>
      <element name="test-execution-filter" optional="true"/>

      <sequential>
        <adapter:execute-junit printsummary="@{printsummary}" fork="@{fork}" forkmode="@{forkmode}" showoutput="@{showoutput}">
          <junit-execution-filter>
            <test-execution-filter/>
          </junit-execution-filter>
        </adapter:execute-junit>
      </sequential>
    </macrodef>

    <macrodef name="execute-tests-coverage" uri="uri:adapter">
      <attribute name="printsummary" default="true"/>
      <attribute name="fork" default="yes"/>
      <attribute name="showoutput" default="no"/>
      <attribute name="forkmode" default="once"/>
      <element name="test-execution-filter" optional="true"/>
      <element name="sysproperties" optional="true"/>
      <element name="extra-classpath" optional="true"/>
      <sequential>
        <delete file="${coverage.metadata.file}" />
        <jacoco:coverage  destfile="${coverage.metadata.file}">
          <junit printsummary="@{printsummary}" fork="@{fork}" forkmode="@{forkmode}" showoutput="@{showoutput}" failureproperty="junit.failed">
            <jvmarg value="-XX:-UseSplitVerifier"/>
            <jvmarg value="-XX:+CMSClassUnloadingEnabled"/>
            <jvmarg value="-XX:+UseConcMarkSweepGC"/>
            <jvmarg value="-XX:+UseParNewGC"/>
            <sysproperties/>
            <formatter type="xml"/>
            <batchtest todir="${tests.output.dir}">
              <fileset dir="${testsrc.dir}">
                <include name="${junit.test.classes}"/>
                <test-execution-filter/>
              </fileset>
            </batchtest>
            <classpath>
              <path refid="main.classpath"/>
              <pathelement path="${classes.build.dir}"/>
              <pathelement path="${testclasses.build.dir}"/>
              <dirset dir="${test.resources.dir}"/>
              <extra-classpath/>
            </classpath>
          </junit>
        </jacoco:coverage>
      </sequential>
    </macrodef>

    <macrodef name="execute-junit" uri="uri:adapter">
      <attribute name="printsummary" default="true"/>
      <attribute name="fork" default="yes"/>
      <attribute name="showoutput" default="no"/>
      <attribute name="forkmode" default="once"/>
      <element name="prependclasspath" optional="true"/>
      <element name="appendclasspath" optional="true"/>
      <element name="sysproperties" optional="true"/>
      <element name="junit-execution-filter" optional="true"/>
      <sequential>
        <junit printsummary="@{printsummary}" fork="@{fork}" forkmode="@{forkmode}" showoutput="@{showoutput}" failureproperty="junit.failed">
          <jvmarg value="-XX:-UseSplitVerifier"/>
          <jvmarg value="-XX:+CMSClassUnloadingEnabled"/>
          <jvmarg value="-XX:+UseConcMarkSweepGC"/>
          <jvmarg value="-XX:+UseParNewGC"/>
          <sysproperties/>
          <formatter type="xml"/>
          <batchtest todir="${tests.output.dir}">
            <fileset dir="${testsrc.dir}">
              <include name="${junit.test.classes}"/>
              <junit-execution-filter/>
            </fileset>
          </batchtest>
          <classpath>
            <prependclasspath/>
            <path refid="main.classpath"/>
            <pathelement path="${classes.build.dir}"/>
            <pathelement path="${testclasses.build.dir}"/>
            <dirset dir="${test.resources.dir}"/>
            <appendclasspath/>
          </classpath>
        </junit>
      </sequential>
    </macrodef>

    <macrodef name="sign-jar" uri="uri:adapter">
      <attribute name="tsaurl" default="${signjar.tsa.url}"/>
      <attribute name="jarfile"/>
      <sequential>
        <if>
          <and>
            <isfalse value="${unsigned.code}"/>
            <isset property="code-signing.keypass"/>
            <isset property="code-signing.storepass"/>
          </and>
          <then>
            <!-- We could specify the digestalg / sigalg to backwards compatibility as JDK7 only comes with
                 SHA256 and SHA256withRSA and if we were to deploy on JRE1.6...
                 e.g. sigalg="MD5withRSA" digestalg="SHA1"
                 We sign in backwards compatibility mode because of jms-jmx (which could be deployed in a v2).
             Use http://tsa.starfieldtech.com or https://timestamp.geotrust.com/tsa as the TSAURL.
            -->
            <signjar jar="@{jarfile}" alias="${code-signing.alias}" keystore="${code-signing.keystore}" storepass="${code-signing.storepass}" keypass="${code-signing.keypass}" sigalg="MD5withRSA" digestalg="SHA1" tsaurl="@{tsaurl}">
            </signjar>
          </then>
        </if>
      </sequential>
    </macrodef>

    <macrodef name="publish-artifact" uri="uri:adapter">
      <attribute name="resolver"/>
      <attribute name="ivy-config"/>
      <attribute name="revision"/>
      <attribute name="status" default="${ivy.artifact.publish.status}"/>
      <attribute name="artifact.basedir" default="${project.dist.dir}"/>
      <sequential>
        <ivy:resolve file="@{ivy-config}" refresh="true" log="${ivy.logging}"/>
        <ivy:publish resolver="@{resolver}" revision="@{revision}" overwrite="true" status="@{status}" publishivy="true" haltonmissing="false" conf="default,master,compile,provided,runtime,test,system,sources,javadoc,optional,examples">
          <artifacts pattern="@{artifact.basedir}/[module]/[type]/[artifact].[ext]"/>
        </ivy:publish>
      </sequential>
    </macrodef>

    <macrodef name="create-manifest" uri="uri:adapter">
      <attribute name="file" default="${build.dir}/Manifest.mf"/>
      <attribute name="title"/>
      <attribute name="vendor" default="Adaptris Ltd"/>
      <attribute name="vendorId" default="com.adaptris"/>
      <attribute name="version" default="${ivy.publish.revision}"/>
      <sequential>
        <manifest file="${build.dir}/Manifest.mf">
          <attribute name="Manifest-Version" value="1.0"/>
          <attribute name="Build-Version" value="@{version}"/>
          <attribute name="Built-By" value="${user.name}"/>
          <attribute name="Implementation-Vendor-Id" value="@{vendorId}"/>
          <attribute name="Implementation-Version" value="@{version}"/>
          <attribute name="Implementation-Title" value="@{title}"/>
          <attribute name="Implementation-Vendor" value="@{vendor}"/>
        </manifest>
      </sequential>
    </macrodef>

    <macrodef name="curl-upload" uri="uri:adapter">
      <attribute name="file"/>
      <attribute name="url"/>
      <attribute name="user" default="${ivy.user}"/>
      <attribute name="password" default="${ivy.password}"/>
      <sequential>
        <echo message="CURL: Uploading @{file} to @{url}"/>
        <exec executable="curl">
          <arg value="--silent"/>
          <arg value="--show-error"/>
          <arg value="-u"/>
          <arg value="@{user}:@{password}"/>
          <arg value="--upload-file"/>
          <arg value="@{file}"/>
          <arg value="@{url}"/>
        </exec>
      </sequential>
    </macrodef>
  </target>


  <target name="prepare-ivy" depends="macrodef.init,taskdef.init">
    <!-- set up main compile classpath using ivy dependecny management -->
    <!-- Because of MSMQ, we need to restrict it to only standard types, as otherwise we'll have
         big trouble with .dll + .LIC files
    -->
    <mkdir dir="${build.dir}/signing"/>
    <ivy:retrieve log="${ivy.logging}" pattern="${build.dir}/signing/[artifact].[ext]" conf="signing" type="jks"/>
  </target>

  <target name="ivy-report" depends="macrodef.init,taskdef.init" description="Generate an ivy dependency report">
    <mkdir dir="${ivy.report.dir}"/>
    <ivy:report todir="${ivy.report.dir}" conf="compile,runtime" graph="false"/>
  </target>

  <target name="pom2ivy" depends="install-ivy" description="Convert a pom file into an ivy.xml">
    <ivy:settings file="${ivy.settings.xml}" />
    <ivy:convertpom pomFile="pom.xml" ivyFile="ivy.xml"/>
  </target>


  <target name="prepare-for-publish" depends="test-no-reports, jar, javadoc">
    <mkdir dir="${project.dist.dir}/${project.name}/pom"/>
    <!-- Stick a shim in here to support WAR files -->
    <!-- If the WAR file is far too large so we don't create it in the sub-dir, so ivy doesn't try to publish it
         ZZLC - Check the length, and then do the copy if it's < 50 Mb...
    -->
    <if>
      <equals arg1="war" arg2="${ivy.publish.bundle.type}"/>
      <then>
        <if>
          <length file="${project.dist.dir}/${project.war.name}" when="less" length="52428800" />
          <then>
            <mkdir dir="${project.dist.dir}/${project.name}/war"/>
            <copy todir="${project.dist.dir}/${project.name}/war" file="${project.dist.dir}/${project.war.name}"/>
          </then>
        </if>
      </then>
    </if>
    <if>
      <equals arg1="zip" arg2="${ivy.publish.bundle.type}"/>
      <then>
        <mkdir dir="${project.dist.dir}/${project.name}/zip"/>
        <copy todir="${project.dist.dir}/${project.name}/zip" file="${project.dist.dir}/${project.zip.name}"/>
      </then>
    </if>
    <if>
      <equals arg1="jar" arg2="${ivy.publish.bundle.type}"/>
      <then>
        <mkdir dir="${project.dist.dir}/${project.name}/jar"/>
        <copy todir="${project.dist.dir}/${project.name}/jar" file="${project.dist.dir}/${project.jar.name}"/>
      </then>
    </if>
    <if>
      <available file="${api.doc.dir}" type="dir"/>
      <then>
        <mkdir dir="${project.dist.dir}/${project.name}/javadoc"/>
        <jar jarfile="${project.dist.dir}/${project.name}/javadoc/${project.name}.jar">
          <fileset dir="${api.doc.dir}"/>
        </jar>
        <zip destfile="${project.dist.dir}/${project.name}/javadoc/${project.name}-javadoc.zip">
          <zipfileset dir="${api.doc.dir}" prefix="docs/optional/${ant.project.name}"/>
        </zip>
      </then>
    </if>
    <if>
      <available file="${example-xml.build.dir}" type="dir"/>
      <then>
        <mkdir dir="${project.dist.dir}/${project.name}/examples"/>
        <zip destfile="${project.dist.dir}/${project.name}/examples/${project.name}-examples.zip">
          <zipfileset dir="${example-xml.build.dir}" prefix="example-xml/optional/${ant.project.name}"/>
        </zip>
      </then>
    </if>
    <ivy:makepom ivyfile="${ivy.xml.file}" pomfile="${project.dist.dir}/${project.name}/pom/${project.name}.pom" description="${project.pom.description}" conf="default,master,compile,provided,runtime,test,system,sources,javadoc,optional"/>
  </target>

  <target name="publish" depends="prepare-for-publish">
    <adapter:publish-artifact resolver="${ivy.repo}" revision="${ivy.publish.revision}" artifact.basedir="${project.dist.dir}" ivy-config="${ivy.xml.file}"/>
    <!-- This publishes the WAR file if it's missing from the prepare-for-publish -->
    <if>
      <equals arg1="war" arg2="${ivy.publish.bundle.type}"/>
      <then>
        <if>
          <length file="${project.dist.dir}/${project.war.name}" when="greater" length="52428800" />
          <then>
            <var name="project.war.name.nexus" value="${project.name}-${ivy.publish.revision}.${ivy.publish.bundle.type}"/>
            <checksum file="${project.dist.dir}/${project.war.name}" algorithm="MD5" pattern="{1}.{0}" forceoverwrite="true"/>
            <checksum file="${project.dist.dir}/${project.war.name}" algorithm="SHA1" pattern="{1}.{0}" forceoverwrite="true"/>
            <adapter:curl-upload file="${project.dist.dir}/${project.war.name}" url="${nexus.artifact.basedir}/${ivy.publish.revision}/${project.war.name.nexus}"/>
            <adapter:curl-upload file="${project.dist.dir}/${project.war.name}.MD5" url="${nexus.artifact.basedir}/${ivy.publish.revision}/${project.war.name.nexus}.md5"/>
            <adapter:curl-upload file="${project.dist.dir}/${project.war.name}.SHA1" url="${nexus.artifact.basedir}/${ivy.publish.revision}/${project.war.name.nexus}.sha1"/>
            <var name="project.war.name.nexus" unset="true"/>
          </then>
        </if>
      </then>
    </if>
  </target>
</project>
